syntax = "proto3";
option java_multiple_files = true;
option java_package = "edu.sjsu.cs249.kafkaTable";

package kafkaTable;

service KafkaTable {
    rpc inc(IncRequest) returns (IncResponse);
    rpc get(GetRequest) returns (GetResponse);
}

message ClientXid {
    string clientid = 1;
    int32 counter = 2;
}

message IncRequest {
  string key = 1;
  // if the key does not exist, it will be created with this value, otherwise the value
  // if the existing key will be incremented by this value
  int32 incValue = 2;
  ClientXid xid = 3;
}

message IncResponse {
}

message GetRequest {
  string key = 1;
  ClientXid xid = 2;
}

message GetResponse {
  // if the key does not exist, the response will be zero
  int32 value = 1;
}

// these messages are published in the "snapshot" topic
message Snapshot {
  // id of the creator of the snapshot
  string replicaId = 1;
  // state table
  map<string, int32> table = 2;
  // operations offset the snapshot is relative to
  int64 operationsOffset = 3;
  // maps the client id to the last counter processed
  // clients can have only one update going at a time
  map<string, int32> clientCounters = 4;
  // snapshotOrdering offset that triggered this snapshot
  int64 snapshotOrderingOffset = 5;
}

service KafkaTableDebug {
  rpc debug(KafkaTableDebugRequest) returns (KafkaTableDebugResponse);
  rpc exit(ExitRequest) returns (ExitResponse);
}

message ExitRequest {}
message ExitResponse {}

message KafkaTableDebugRequest {
}

message KafkaTableDebugResponse {
    Snapshot snapshot = 1;
}

// these messages are published in the "operations" topic
message PublishedItem {
  oneof item {
    IncRequest inc = 1;
    GetRequest get = 2;
  }
}

// these messages are published in the "snapshotOrdering" topic
message SnapshotOrdering {
    string replicaId = 1;
}

message SimpleMessage {
    string message = 1;
}