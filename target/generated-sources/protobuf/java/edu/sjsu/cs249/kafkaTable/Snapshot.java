// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

package edu.sjsu.cs249.kafkaTable;

/**
 * <pre>
 * these messages are published in the "snapshot" topic
 * </pre>
 *
 * Protobuf type {@code kafkaTable.Snapshot}
 */
public final class Snapshot extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:kafkaTable.Snapshot)
    SnapshotOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Snapshot.newBuilder() to construct.
  private Snapshot(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Snapshot() {
    replicaId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Snapshot();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Snapshot(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            replicaId_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              table_ = com.google.protobuf.MapField.newMapField(
                  TableDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
            table__ = input.readMessage(
                TableDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            table_.getMutableMap().put(
                table__.getKey(), table__.getValue());
            break;
          }
          case 24: {

            operationsOffset_ = input.readInt64();
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              clientCounters_ = com.google.protobuf.MapField.newMapField(
                  ClientCountersDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
            clientCounters__ = input.readMessage(
                ClientCountersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            clientCounters_.getMutableMap().put(
                clientCounters__.getKey(), clientCounters__.getValue());
            break;
          }
          case 40: {

            snapshotOrderingOffset_ = input.readInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return edu.sjsu.cs249.kafkaTable.Messages.internal_static_kafkaTable_Snapshot_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetTable();
      case 4:
        return internalGetClientCounters();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return edu.sjsu.cs249.kafkaTable.Messages.internal_static_kafkaTable_Snapshot_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            edu.sjsu.cs249.kafkaTable.Snapshot.class, edu.sjsu.cs249.kafkaTable.Snapshot.Builder.class);
  }

  public static final int REPLICAID_FIELD_NUMBER = 1;
  private volatile java.lang.Object replicaId_;
  /**
   * <pre>
   * id of the creator of the snapshot
   * </pre>
   *
   * <code>string replicaId = 1;</code>
   * @return The replicaId.
   */
  @java.lang.Override
  public java.lang.String getReplicaId() {
    java.lang.Object ref = replicaId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      replicaId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * id of the creator of the snapshot
   * </pre>
   *
   * <code>string replicaId = 1;</code>
   * @return The bytes for replicaId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getReplicaIdBytes() {
    java.lang.Object ref = replicaId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      replicaId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TABLE_FIELD_NUMBER = 2;
  private static final class TableDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                edu.sjsu.cs249.kafkaTable.Messages.internal_static_kafkaTable_Snapshot_TableEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> table_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetTable() {
    if (table_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          TableDefaultEntryHolder.defaultEntry);
    }
    return table_;
  }

  public int getTableCount() {
    return internalGetTable().getMap().size();
  }
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */

  @java.lang.Override
  public boolean containsTable(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetTable().getMap().containsKey(key);
  }
  /**
   * Use {@link #getTableMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Integer> getTable() {
    return getTableMap();
  }
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.Integer> getTableMap() {
    return internalGetTable().getMap();
  }
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */
  @java.lang.Override

  public int getTableOrDefault(
      java.lang.String key,
      int defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetTable().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */
  @java.lang.Override

  public int getTableOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetTable().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int OPERATIONSOFFSET_FIELD_NUMBER = 3;
  private long operationsOffset_;
  /**
   * <pre>
   * operations offset the snapshot is relative to
   * </pre>
   *
   * <code>int64 operationsOffset = 3;</code>
   * @return The operationsOffset.
   */
  @java.lang.Override
  public long getOperationsOffset() {
    return operationsOffset_;
  }

  public static final int CLIENTCOUNTERS_FIELD_NUMBER = 4;
  private static final class ClientCountersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                edu.sjsu.cs249.kafkaTable.Messages.internal_static_kafkaTable_Snapshot_ClientCountersEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> clientCounters_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetClientCounters() {
    if (clientCounters_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ClientCountersDefaultEntryHolder.defaultEntry);
    }
    return clientCounters_;
  }

  public int getClientCountersCount() {
    return internalGetClientCounters().getMap().size();
  }
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */

  @java.lang.Override
  public boolean containsClientCounters(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetClientCounters().getMap().containsKey(key);
  }
  /**
   * Use {@link #getClientCountersMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Integer> getClientCounters() {
    return getClientCountersMap();
  }
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.Integer> getClientCountersMap() {
    return internalGetClientCounters().getMap();
  }
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */
  @java.lang.Override

  public int getClientCountersOrDefault(
      java.lang.String key,
      int defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetClientCounters().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */
  @java.lang.Override

  public int getClientCountersOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.Integer> map =
        internalGetClientCounters().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int SNAPSHOTORDERINGOFFSET_FIELD_NUMBER = 5;
  private long snapshotOrderingOffset_;
  /**
   * <pre>
   * snapshotOrdering offset that triggered this snapshot
   * </pre>
   *
   * <code>int64 snapshotOrderingOffset = 5;</code>
   * @return The snapshotOrderingOffset.
   */
  @java.lang.Override
  public long getSnapshotOrderingOffset() {
    return snapshotOrderingOffset_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(replicaId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, replicaId_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetTable(),
        TableDefaultEntryHolder.defaultEntry,
        2);
    if (operationsOffset_ != 0L) {
      output.writeInt64(3, operationsOffset_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetClientCounters(),
        ClientCountersDefaultEntryHolder.defaultEntry,
        4);
    if (snapshotOrderingOffset_ != 0L) {
      output.writeInt64(5, snapshotOrderingOffset_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(replicaId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, replicaId_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetTable().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      table__ = TableDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, table__);
    }
    if (operationsOffset_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, operationsOffset_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetClientCounters().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      clientCounters__ = ClientCountersDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, clientCounters__);
    }
    if (snapshotOrderingOffset_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, snapshotOrderingOffset_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof edu.sjsu.cs249.kafkaTable.Snapshot)) {
      return super.equals(obj);
    }
    edu.sjsu.cs249.kafkaTable.Snapshot other = (edu.sjsu.cs249.kafkaTable.Snapshot) obj;

    if (!getReplicaId()
        .equals(other.getReplicaId())) return false;
    if (!internalGetTable().equals(
        other.internalGetTable())) return false;
    if (getOperationsOffset()
        != other.getOperationsOffset()) return false;
    if (!internalGetClientCounters().equals(
        other.internalGetClientCounters())) return false;
    if (getSnapshotOrderingOffset()
        != other.getSnapshotOrderingOffset()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + REPLICAID_FIELD_NUMBER;
    hash = (53 * hash) + getReplicaId().hashCode();
    if (!internalGetTable().getMap().isEmpty()) {
      hash = (37 * hash) + TABLE_FIELD_NUMBER;
      hash = (53 * hash) + internalGetTable().hashCode();
    }
    hash = (37 * hash) + OPERATIONSOFFSET_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getOperationsOffset());
    if (!internalGetClientCounters().getMap().isEmpty()) {
      hash = (37 * hash) + CLIENTCOUNTERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetClientCounters().hashCode();
    }
    hash = (37 * hash) + SNAPSHOTORDERINGOFFSET_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSnapshotOrderingOffset());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static edu.sjsu.cs249.kafkaTable.Snapshot parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(edu.sjsu.cs249.kafkaTable.Snapshot prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * these messages are published in the "snapshot" topic
   * </pre>
   *
   * Protobuf type {@code kafkaTable.Snapshot}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:kafkaTable.Snapshot)
      edu.sjsu.cs249.kafkaTable.SnapshotOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.sjsu.cs249.kafkaTable.Messages.internal_static_kafkaTable_Snapshot_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetTable();
        case 4:
          return internalGetClientCounters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableTable();
        case 4:
          return internalGetMutableClientCounters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.sjsu.cs249.kafkaTable.Messages.internal_static_kafkaTable_Snapshot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.sjsu.cs249.kafkaTable.Snapshot.class, edu.sjsu.cs249.kafkaTable.Snapshot.Builder.class);
    }

    // Construct using edu.sjsu.cs249.kafkaTable.Snapshot.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      replicaId_ = "";

      internalGetMutableTable().clear();
      operationsOffset_ = 0L;

      internalGetMutableClientCounters().clear();
      snapshotOrderingOffset_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return edu.sjsu.cs249.kafkaTable.Messages.internal_static_kafkaTable_Snapshot_descriptor;
    }

    @java.lang.Override
    public edu.sjsu.cs249.kafkaTable.Snapshot getDefaultInstanceForType() {
      return edu.sjsu.cs249.kafkaTable.Snapshot.getDefaultInstance();
    }

    @java.lang.Override
    public edu.sjsu.cs249.kafkaTable.Snapshot build() {
      edu.sjsu.cs249.kafkaTable.Snapshot result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public edu.sjsu.cs249.kafkaTable.Snapshot buildPartial() {
      edu.sjsu.cs249.kafkaTable.Snapshot result = new edu.sjsu.cs249.kafkaTable.Snapshot(this);
      int from_bitField0_ = bitField0_;
      result.replicaId_ = replicaId_;
      result.table_ = internalGetTable();
      result.table_.makeImmutable();
      result.operationsOffset_ = operationsOffset_;
      result.clientCounters_ = internalGetClientCounters();
      result.clientCounters_.makeImmutable();
      result.snapshotOrderingOffset_ = snapshotOrderingOffset_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof edu.sjsu.cs249.kafkaTable.Snapshot) {
        return mergeFrom((edu.sjsu.cs249.kafkaTable.Snapshot)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(edu.sjsu.cs249.kafkaTable.Snapshot other) {
      if (other == edu.sjsu.cs249.kafkaTable.Snapshot.getDefaultInstance()) return this;
      if (!other.getReplicaId().isEmpty()) {
        replicaId_ = other.replicaId_;
        onChanged();
      }
      internalGetMutableTable().mergeFrom(
          other.internalGetTable());
      if (other.getOperationsOffset() != 0L) {
        setOperationsOffset(other.getOperationsOffset());
      }
      internalGetMutableClientCounters().mergeFrom(
          other.internalGetClientCounters());
      if (other.getSnapshotOrderingOffset() != 0L) {
        setSnapshotOrderingOffset(other.getSnapshotOrderingOffset());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      edu.sjsu.cs249.kafkaTable.Snapshot parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (edu.sjsu.cs249.kafkaTable.Snapshot) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object replicaId_ = "";
    /**
     * <pre>
     * id of the creator of the snapshot
     * </pre>
     *
     * <code>string replicaId = 1;</code>
     * @return The replicaId.
     */
    public java.lang.String getReplicaId() {
      java.lang.Object ref = replicaId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        replicaId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * id of the creator of the snapshot
     * </pre>
     *
     * <code>string replicaId = 1;</code>
     * @return The bytes for replicaId.
     */
    public com.google.protobuf.ByteString
        getReplicaIdBytes() {
      java.lang.Object ref = replicaId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        replicaId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * id of the creator of the snapshot
     * </pre>
     *
     * <code>string replicaId = 1;</code>
     * @param value The replicaId to set.
     * @return This builder for chaining.
     */
    public Builder setReplicaId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      replicaId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * id of the creator of the snapshot
     * </pre>
     *
     * <code>string replicaId = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearReplicaId() {
      
      replicaId_ = getDefaultInstance().getReplicaId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * id of the creator of the snapshot
     * </pre>
     *
     * <code>string replicaId = 1;</code>
     * @param value The bytes for replicaId to set.
     * @return This builder for chaining.
     */
    public Builder setReplicaIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      replicaId_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> table_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetTable() {
      if (table_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TableDefaultEntryHolder.defaultEntry);
      }
      return table_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetMutableTable() {
      onChanged();;
      if (table_ == null) {
        table_ = com.google.protobuf.MapField.newMapField(
            TableDefaultEntryHolder.defaultEntry);
      }
      if (!table_.isMutable()) {
        table_ = table_.copy();
      }
      return table_;
    }

    public int getTableCount() {
      return internalGetTable().getMap().size();
    }
    /**
     * <pre>
     * state table
     * </pre>
     *
     * <code>map&lt;string, int32&gt; table = 2;</code>
     */

    @java.lang.Override
    public boolean containsTable(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTable().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTableMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getTable() {
      return getTableMap();
    }
    /**
     * <pre>
     * state table
     * </pre>
     *
     * <code>map&lt;string, int32&gt; table = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getTableMap() {
      return internalGetTable().getMap();
    }
    /**
     * <pre>
     * state table
     * </pre>
     *
     * <code>map&lt;string, int32&gt; table = 2;</code>
     */
    @java.lang.Override

    public int getTableOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTable().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * state table
     * </pre>
     *
     * <code>map&lt;string, int32&gt; table = 2;</code>
     */
    @java.lang.Override

    public int getTableOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTable().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearTable() {
      internalGetMutableTable().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * state table
     * </pre>
     *
     * <code>map&lt;string, int32&gt; table = 2;</code>
     */

    public Builder removeTable(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableTable().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getMutableTable() {
      return internalGetMutableTable().getMutableMap();
    }
    /**
     * <pre>
     * state table
     * </pre>
     *
     * <code>map&lt;string, int32&gt; table = 2;</code>
     */
    public Builder putTable(
        java.lang.String key,
        int value) {
      if (key == null) { throw new NullPointerException("map key"); }
      
      internalGetMutableTable().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * state table
     * </pre>
     *
     * <code>map&lt;string, int32&gt; table = 2;</code>
     */

    public Builder putAllTable(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      internalGetMutableTable().getMutableMap()
          .putAll(values);
      return this;
    }

    private long operationsOffset_ ;
    /**
     * <pre>
     * operations offset the snapshot is relative to
     * </pre>
     *
     * <code>int64 operationsOffset = 3;</code>
     * @return The operationsOffset.
     */
    @java.lang.Override
    public long getOperationsOffset() {
      return operationsOffset_;
    }
    /**
     * <pre>
     * operations offset the snapshot is relative to
     * </pre>
     *
     * <code>int64 operationsOffset = 3;</code>
     * @param value The operationsOffset to set.
     * @return This builder for chaining.
     */
    public Builder setOperationsOffset(long value) {
      
      operationsOffset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * operations offset the snapshot is relative to
     * </pre>
     *
     * <code>int64 operationsOffset = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearOperationsOffset() {
      
      operationsOffset_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> clientCounters_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetClientCounters() {
      if (clientCounters_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ClientCountersDefaultEntryHolder.defaultEntry);
      }
      return clientCounters_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetMutableClientCounters() {
      onChanged();;
      if (clientCounters_ == null) {
        clientCounters_ = com.google.protobuf.MapField.newMapField(
            ClientCountersDefaultEntryHolder.defaultEntry);
      }
      if (!clientCounters_.isMutable()) {
        clientCounters_ = clientCounters_.copy();
      }
      return clientCounters_;
    }

    public int getClientCountersCount() {
      return internalGetClientCounters().getMap().size();
    }
    /**
     * <pre>
     * maps the client id to the last counter processed
     * clients can have only one update going at a time
     * </pre>
     *
     * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
     */

    @java.lang.Override
    public boolean containsClientCounters(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetClientCounters().getMap().containsKey(key);
    }
    /**
     * Use {@link #getClientCountersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getClientCounters() {
      return getClientCountersMap();
    }
    /**
     * <pre>
     * maps the client id to the last counter processed
     * clients can have only one update going at a time
     * </pre>
     *
     * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getClientCountersMap() {
      return internalGetClientCounters().getMap();
    }
    /**
     * <pre>
     * maps the client id to the last counter processed
     * clients can have only one update going at a time
     * </pre>
     *
     * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
     */
    @java.lang.Override

    public int getClientCountersOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetClientCounters().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * maps the client id to the last counter processed
     * clients can have only one update going at a time
     * </pre>
     *
     * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
     */
    @java.lang.Override

    public int getClientCountersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetClientCounters().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearClientCounters() {
      internalGetMutableClientCounters().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * maps the client id to the last counter processed
     * clients can have only one update going at a time
     * </pre>
     *
     * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
     */

    public Builder removeClientCounters(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableClientCounters().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getMutableClientCounters() {
      return internalGetMutableClientCounters().getMutableMap();
    }
    /**
     * <pre>
     * maps the client id to the last counter processed
     * clients can have only one update going at a time
     * </pre>
     *
     * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
     */
    public Builder putClientCounters(
        java.lang.String key,
        int value) {
      if (key == null) { throw new NullPointerException("map key"); }
      
      internalGetMutableClientCounters().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * maps the client id to the last counter processed
     * clients can have only one update going at a time
     * </pre>
     *
     * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
     */

    public Builder putAllClientCounters(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      internalGetMutableClientCounters().getMutableMap()
          .putAll(values);
      return this;
    }

    private long snapshotOrderingOffset_ ;
    /**
     * <pre>
     * snapshotOrdering offset that triggered this snapshot
     * </pre>
     *
     * <code>int64 snapshotOrderingOffset = 5;</code>
     * @return The snapshotOrderingOffset.
     */
    @java.lang.Override
    public long getSnapshotOrderingOffset() {
      return snapshotOrderingOffset_;
    }
    /**
     * <pre>
     * snapshotOrdering offset that triggered this snapshot
     * </pre>
     *
     * <code>int64 snapshotOrderingOffset = 5;</code>
     * @param value The snapshotOrderingOffset to set.
     * @return This builder for chaining.
     */
    public Builder setSnapshotOrderingOffset(long value) {
      
      snapshotOrderingOffset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * snapshotOrdering offset that triggered this snapshot
     * </pre>
     *
     * <code>int64 snapshotOrderingOffset = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearSnapshotOrderingOffset() {
      
      snapshotOrderingOffset_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:kafkaTable.Snapshot)
  }

  // @@protoc_insertion_point(class_scope:kafkaTable.Snapshot)
  private static final edu.sjsu.cs249.kafkaTable.Snapshot DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new edu.sjsu.cs249.kafkaTable.Snapshot();
  }

  public static edu.sjsu.cs249.kafkaTable.Snapshot getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Snapshot>
      PARSER = new com.google.protobuf.AbstractParser<Snapshot>() {
    @java.lang.Override
    public Snapshot parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Snapshot(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Snapshot> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Snapshot> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public edu.sjsu.cs249.kafkaTable.Snapshot getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

