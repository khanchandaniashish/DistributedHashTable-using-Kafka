// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

package edu.sjsu.cs249.kafkaTable;

public interface SnapshotOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kafkaTable.Snapshot)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * id of the creator of the snapshot
   * </pre>
   *
   * <code>string replicaId = 1;</code>
   * @return The replicaId.
   */
  java.lang.String getReplicaId();
  /**
   * <pre>
   * id of the creator of the snapshot
   * </pre>
   *
   * <code>string replicaId = 1;</code>
   * @return The bytes for replicaId.
   */
  com.google.protobuf.ByteString
      getReplicaIdBytes();

  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */
  int getTableCount();
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */
  boolean containsTable(
      java.lang.String key);
  /**
   * Use {@link #getTableMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getTable();
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getTableMap();
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */

  int getTableOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <pre>
   * state table
   * </pre>
   *
   * <code>map&lt;string, int32&gt; table = 2;</code>
   */

  int getTableOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * operations offset the snapshot is relative to
   * </pre>
   *
   * <code>int64 operationsOffset = 3;</code>
   * @return The operationsOffset.
   */
  long getOperationsOffset();

  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */
  int getClientCountersCount();
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */
  boolean containsClientCounters(
      java.lang.String key);
  /**
   * Use {@link #getClientCountersMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getClientCounters();
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getClientCountersMap();
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */

  int getClientCountersOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <pre>
   * maps the client id to the last counter processed
   * clients can have only one update going at a time
   * </pre>
   *
   * <code>map&lt;string, int32&gt; clientCounters = 4;</code>
   */

  int getClientCountersOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * snapshotOrdering offset that triggered this snapshot
   * </pre>
   *
   * <code>int64 snapshotOrderingOffset = 5;</code>
   * @return The snapshotOrderingOffset.
   */
  long getSnapshotOrderingOffset();
}
